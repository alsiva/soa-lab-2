/*
 * SOA LAB 1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ifmo.soalab2.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlRootElement;

import java.util.Objects;

/**
 * ProductWithoutIDCoordinates
 */
@XmlRootElement(name = "ProductWithoutIDCoordinates")
@XmlAccessorType(XmlAccessType.FIELD)
public class ProductWithoutIDCoordinates   {
  private Integer x = null;

  private Integer y = null;

  public ProductWithoutIDCoordinates x(Integer x) {
    this.x = x;
    return this;
  }

  /**
   * Get x
   * @return x
   **/
  @Schema(example = "23", description = "")
  public Integer getX() {
    return x;
  }

  public void setX(Integer x) {
    this.x = x;
  }

  public ProductWithoutIDCoordinates y(Integer y) {
    this.y = y;
    return this;
  }

  /**
   * Get y
   * @return y
   **/
  @Schema(example = "47", description = "")
  public Integer getY() {
    return y;
  }

  public void setY(Integer y) {
    this.y = y;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductWithoutIDCoordinates productWithoutIDCoordinates = (ProductWithoutIDCoordinates) o;
    return Objects.equals(this.x, productWithoutIDCoordinates.x) &&
        Objects.equals(this.y, productWithoutIDCoordinates.y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(x, y);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductWithoutIDCoordinates {\n");
    
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
